{"version":3,"sources":["components/MainMessage.js","components/Wrapper/index.js","components/ImgClick/ImgClick.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Message","style","margin","marginTop","className","backgroundImage","Wrapper","props","console","log","children","ImgClick","Images","alt","name","src","onClick","NavBar","fontFamily","backgroundColor","boxShadow","color","width","display","float","message","score","topScore","shuffleArray","array","i","length","j","Math","floor","random","temp","clickedImg","App","state","shuffleThis","setState","handleClick","image","includes","push","this","map","action","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.361ce40f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Message() {\n  return (\n    <div style={{ margin: \"50px\", marginTop:\"10%\"}}>\n      <header className=\"App-header text-center\" >\n        <h1>Clicky Game!</h1>\n        <h2>\n          Click on an image to earn points, but don't click on any more than\n          once!\n        </h2>\n      </header>\n      <main\n        className=\"container\"\n        style={{ backgroundImage: \"url(/background.jpeg)\" }}\n      ></main>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  console.log(props)\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImgClick(Images) {\nconsole.log(Images);\n  return (\n    <div className=\"card container\">\n      <div className=\"img-container\">\n        <img style = {Images.style} alt={Images.name} src={Images.src} onClick={Images.onClick} />\n      </div>\n    </div>\n  );\n}\nexport default ImgClick;\n","import React from \"react\";\n\nfunction NavBar(props) {\n  console.log(props);\n  return (\n    <div style={{ fontFamily: \"Comfortaa, cursive\" }}>\n      <nav\n        className=\"navbar fixed-top\"\n        style={{\n          backgroundColor: \"#4D90FE\",\n          boxShadow:\n            \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n          color: \"#FFED00\"\n        }}\n      >\n        <ul style={{ width: \"100%\" }}>\n          <li style={{ width: \"40%\", display: \"inline-block\", float: \"none\" }}>\n            <img\n              src={\"clicky-game-logo.png\"}\n              style={{ width: \"80%\" }}\n              alt=\"GameLogo\"\n            />\n          </li>\n          <li style={{ width: \"30%\", display: \"inline-block\", float: \"none\" }}>\n            <h4>{props.message}</h4>\n          </li>\n          <li\n            className=\"navbar-text\"\n            style={{ width: \"30%\", display: \"inline-block\", float: \"none\" }}\n          >\n            <h3>SCORE: {props.score} | TOP SCORE: {props.topScore}</h3>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Message from \"./components/MainMessage\";\nimport Wraper from \"./components/Wrapper\";\nimport ImgClick from \"./components/ImgClick/ImgClick\";\nimport NavBar from \"./components/NavBar\";\nimport Images from \"./Images.json\";\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\nlet clickedImg = [];\n\nclass App extends Component {\n  // Setting this.state.Images to the friends json array\n  state = {\n    Images: shuffleArray(Images),\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\"\n  };\n  shuffleThis = () => {\n    this.setState({ Images: shuffleArray(this.state.Images) });\n  };\n\n  handleClick = name => {\n    let image = name;\n    console.log(image);\n    if (clickedImg.includes(image)) {\n      this.setState({\n        score: 0,\n        message: \"You guessed incorrectly!\"\n      });\n      clickedImg = [];\n    } else if (!clickedImg.includes(image)) {\n      clickedImg.push(image);\n      this.setState({\n        score: this.state.score + 1,\n        message: \"You guessed correctly!\"\n      });\n      console.log(clickedImg);\n      let score = this.state.score + 1;\n      if (score > this.state.topScore) {\n        this.setState({ topScore: this.state.score + 1 });\n        if (this.state.topScore + 1 === 12) {\n          this.setState({\n            score: 0,\n            topScore: 0,\n            message: \"You won! Let's try again\"\n          });\n          clickedImg = [];\n        }\n      }\n    }\n    this.shuffleThis();\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    //const shuffledImages = this.state.Images;\n    return (\n      <div>\n        <NavBar\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Message />\n        <div style={{ backgroundImage: \"url(/background.jpeg)\" }}>\n          <Wraper>\n            {Images.map(image => (\n              <ImgClick\n                style={this.state.action}\n                alt={image.name}\n                src={image.src}\n                onClick={() => {\n                  this.handleClick(image.name);\n                }}\n              />\n            ))}\n          </Wraper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}